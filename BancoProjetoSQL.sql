CREATE TABLE Cachorro( 
    idCachorro number(5) generated by default as identity primary key, 
    nome varchar2(45), 
    dataNascimento date, 
    pedigree varchar2(45), 
    raca varchar2(45),
    sexo varchar2(45),
    tipo varchar2(45)
);


CREATE TABLE  Padreador(
    idPadreador number(5) generated by default as identity primary key,
    idCachorro number(5),
    dataInicioMaturidade date,
    CONSTRAINT fk_cachorro FOREIGN KEY (idCachorro) REFERENCES Cachorro (idCachorro)
);

CREATE TABLE Matriz(
    idMatiz number(5) generated by default as identity primary key,
    idCachorro number(5),
    dataInicioMaturidade date,
    dataTermino date,
    prenha varchar2(45),

    CONSTRAINT fk_cachorro FOREIGN KEY (idCachorro) REFERENCES Cachorro (idCachorro)
);

CREATE TABLE AntiPulgas(
    idAntigaPulgas number(5) generated by default as identity primary key,
    idCachorro number(5),
    dataAplicacao date,
    CONSTRAINT fk_cachorro_ap FOREIGN KEY (idCachorro) REFERENCES Cachorro (idCachorro)
);

CREATE TABLE CARTEIRINHA_VACI (
    idCarteirinha NUMBER(5) GENERATED BY DEFAULT AS IDENTITY primary key,
    idVacina NUMBER(5),
    idCachorro NUMBER(5),
    dataAplicacao DATE
    CONSTRAINT fk_cachorro_cv FOREIGN KEY (idCachorro) REFERENCES Cachorro (idCachorro)
    CONSTRAINT fk_vacina FOREIGN KEY (idVacina) REFERENCES Vacina (idVacina)
);

CREATE TABLE VACINA (
    idVacina NUMBER(5) GENERATED BY DEFAULT AS IDENTITY primary key,
    fabricante VARCHAR2 (150),
    lote VARCHAR2 (150),
    tipoVacina VARCHAR2 (150)
);

CREATE TABLE LEMBRETE(
    idLembrete number(5) GENERATED BY DEFAULT AS IDENTITY primary key,
    idCachorro number(5),
    tipo varchar2(50),
    dataLembrete date,
    CONSTRAINT fk_cachorro_l FOREIGN KEY (idCachorro) REFERENCES Cachorro (idCachorro)
);


CREATE TABLE Cruzamento(
    idCruzamento number(5) generated by default as identity primary key,
    idCio number(5),
    idMatriz number(5),
    idPadreador number(5),
    dataCruzamento date,
    CONSTRAINT fk_matriz FOREIGN KEY (idMatriz) REFERENCES Cachorro (idCachorro),
    CONSTRAINT fk_cio FOREIGN KEY (idCio) REFERENCES Matriz (idMatiz),
    CONSTRAINT fk_padreador FOREIGN KEY (idPadreador) REFERENCES Padreador (idPadreador)
);



INSERT INTO Cachorro (nome, dataNascimento, pedigree, raca, sexo, tipo) VALUES ('Max', TO_DATE('23-01-21','DD-MM-YY'), 'SBC-1475', 'Golden Retriver', 'macho', 'padreador'); 
INSERT INTO Cachorro (nome, dataNascimento, pedigree, raca, sexo, tipo) VALUES ('Nina', TO_DATE('23-02-21','DD-MM-YY'), 'SBC-1476', 'Golden Retriver', 'femea', 'matriz'); 
INSERT INTO Cachorro (nome, dataNascimento, pedigree, raca, sexo, tipo) VALUES ('Nick', TO_DATE('23-09-21','DD-MM-YY'), 'SBC-1477', 'Golden Retriver', 'macho', 'filhote'); 
INSERT INTO Cachorro (nome, dataNascimento, pedigree, raca, sexo, tipo) VALUES ('Chloe', TO_DATE('23-10-21','DD-MM-YY'), 'SBC-1478', 'Golden Retriver', 'femea', 'filhote'); 
INSERT INTO Cachorro (nome, dataNascimento, pedigree, raca, sexo, tipo) VALUES ('Xuxa', TO_DATE('14-11-21','DD-MM-YY'), 'SBC-1479', 'Golden Retriver', 'femea','filhote'); 


CREATE OR REPLACE VIEW Padreadores_Maduros  ----- Padreadores com mais de 6 meses para checkar maturidade ------
AS SELECT Nome as Padreador_SeisMeses, raca as raca from cachorro 
where dataNascimento <= sysdate - 180 AND tipo = 'padreador'; 

-----Registra primeiro Cio e data incio maturidade machos------
CREATE OR REPLACE TRIGGER Registra_maturidadeP
AFTER INSERT 
ON CACHORRO
FOR EACH ROW
BEGIN
    IF :new.tipo = 'padreador' THEN
        INSERT INTO Padreador (idCachorro, dataInicioMaturidade) VALUES (:new.idCachorro,TO_DATE( ADD_MONTHS(:new.dataNascimento,6)));
    ELSIF :new.tipo = 'matriz' THEN
        INSERT INTO Matriz (idCachorro,dataInicioMaturidade, dataTermino, prenha) VALUES (:new.idCachorro,TO_DATE( ADD_MONTHS(:new.dataNascimento,6)), TO_DATE(ADD_MONTHS(:new.dataNascimento,6)+15), 'N');
    END IF;
END;
/

CREATE OR REPLACE VIEW ProximoCio 
AS SELECT c.nome as Cadela, ADD_MONTHS(m.datatermino, 5) as dataproximo1mesantecedencia from cachorro c, matriz m
where c.idcachorro = m.idcachorro;


------Cria lembrete do próximo Cio------
CREATE OR REPLACE TRIGGER Lembrete_Próximo_Cio
AFTER INSERT 
ON matriz
FOR EACH ROW
BEGIN
    insert into LEMBRETE (idCachorro, tipo, dataLembrete) values (:new.idCachorro, 'Próximo cio', TO_DATE(ADD_MONTHS(:new.dataTermino, 5)));
  
END;
/

------VERIFICA SE CRUZOU NO ULTIMO CIO------
CREATE OR REPLACE FUNCTION check_cruzamento(idCadela in number)
return boolean
is
v_idCio number;
v_number number;
pode_cruzar boolean;

BEGIN 

    SELECT idMatiz into v_idCIo FROM Matriz
    WHERE dataTermino = (SELECT MAX(dataTermino) from Matriz
                            WHERE idCachorro = idCadela) 
    AND idCachorro = idCadela;
    
    SELECT COUNT(*) INTO v_number FROM CRUZAMENTO WHERE idCio = v_idCio;
    
    IF v_number >= 1 THEN
        pode_cruzar := false;
        RETURN  pode_cruzar;
    ELSE
        pode_cruzar := true;
        RETURN pode_cruzar;
    END IF;
END;
/

---------Cria lembrentes de vacina, vermifugo e antipulgas-------------
CREATE OR REPLACE PROCEDURE "ADD_MEDICACAO" (
    v_idCachorro number,
    v_dataAplicacao date,
    v_idVacina number,
    vopr CHAR
)
is
    vExeption exception;
BEGIN 
    IF (vopr = 'V') THEN
        insert into CARTEIRINHA_VACI (idVacina, idCachorro, dataAplicacao) values (v_idVacina, v_idCachorro, TO_DATE(v_dataAplicacao, 'DD-MM-YY'));
        INSERT INTO LEMBRETE (idCachorro, tipo, dataLembrete) values (v_idCachorro, 'lembrete vacina', TO_DATE(ADD_MONTHS(v_dataAplicacao, 12)-7, 'DD-MM-YY'));
    ELSE
    IF(vopr = 'C') THEN
        INSERT INTO LEMBRETE (idCachorro, tipo, dataLembrete) values (v_idCachorro, 'Lembrete medicação carrapato', TO_DATE(ADD_MONTHS(v_dataAplicacao, 3), 'DD-MM-YY'));
        INSERT into ANTIPULGAS(idCachorro, dataAplicacao) values (v_idCachorro, TO_DATE(v_dataAplicacao, 'DD-MM-YY'));
    ELSE
    IF (vopr = 'F') THEN
        INSERT INTO LEMBRETE (idCachorro, tipo, dataLembrete) values (v_idCachorro, 'Lembrete 2ª dose vermifugo', TO_DATE(v_dataAplicacao+15, 'DD-MM-YY'));
        INSERT INTO LEMBRETE (idCachorro, tipo, dataLembrete) values (v_idCachorro, 'Lembrete novo vermifugo', TO_DATE(ADD_MONTHS(v_dataAplicacao, 12), 'DD-MM-YY'));
    ELSE
        RAISE vExeption;
    END IF;
    END IF;
    END IF;
    EXCEPTION
        WHEN vExeption THEN
            RAISE_APPLICATION_ERROR(-20999, 'ATENÇÃO! OPERAÇÃO INEXISTENTE, ESCOLHA V, C OU F', FALSE);
END ADD_MEDICACAO;



CREATE OR REPLACE TRIGGER Lembrete_Ultrasom
    AFTER INSERT 
    ON cruzamento
    FOR EACH ROW
    BEGIN
        insert into LEMBRETE (idCachorro, tipo, dataLembrete) values (:new.idMatriz, 'Primeiro Ultrasom', TO_DATE(ADD_MONTHS(:new.dataCruzamento, 1)));

END;
/

CREATE OR REPLACE PROCEDURE "CONFULTRA" (
    v_idMatriz number,
    v_dataUltra date
)
    is

    BEGIN
        UPDATE MATRIZ SET prenha = 'sim' where idCachorro = v_idMatriz;
        INSERT INTO LEMBRETE (idCachorro, tipo, dataLembrete) values (v_idMatriz, 'Checar sinais nascimento filhote', TO_DATE(ADD_MONTHS(v_dataUltra, 2), 'DD-MM-YY'));

END CONFULTRA;


CREATE OR REPLACE PACKAGE PKGMATRIZDOACAO AS

    CURSOR cCursor is
        select * 
        from Cachorro where tipo = 'matriz';
        rCursor cCursor%ROWTYPE;
    
    PROCEDURE LEMBRETEDOAMATRIZ;
END PKGMATRIZDOACAO;

CREATE OR REPLACE PACKAGE BODY PKGMATRIZDOACAO AS

    PROCEDURE LEMBRETEDOAMATRIZ IS
    
    BEGIN
        OPEN cCursor;
        
        LOOP 
            FETCH cCursor into rCursor;
            EXIT WHEN cCursor%NOTFOUND;
            IF(rCursor.dataNascimento <= sysdate - 1460) THEN
                INSERT INTO LEMBRETE (idCachorro, tipo, dataLembrete) values (rCursor.idCachorro,'Castrarm e/ou doar', TO_DATE(sysdate, 'DD-MM-YY'));
            END IF;           
        END LOOP;
        CLOSE cCursor;
        end;
END PKGMATRIZDOACAO;
